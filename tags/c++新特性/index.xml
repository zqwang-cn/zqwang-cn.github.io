<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wang&#39;s blog</title>
    <link>https://zqwang-cn.github.io/tags/c&#43;&#43;%E6%96%B0%E7%89%B9%E6%80%A7/</link>
    <description>Wang&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2023, zqwang; All rights reserved.</copyright>
    <lastBuildDate>Sat, 10 Jun 2023 15:17:07 +0800</lastBuildDate><atom:link href="https://zqwang-cn.github.io/tags/c++%E6%96%B0%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>智能指针</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/smart-pointers/</link>
        <pubDate>Tue, 30 May 2023 21:27:12 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/smart-pointers/</guid>
        <description>C++11标准废弃了原来的智能指针auto_ptr，同时引入了三个新的智能指针：unique_ptr, shared_ptr与weak_ptr。它们基于RAII原则进行内存管理。
RAII（资源获取即初始化） C++中可以在栈上或堆上申请内存，栈上申请的内存会在超出作用域时自动释放，但是堆上申请的内存需要手动释放，否则会出现内存泄漏。在现代C++中，通常基于RAII原则编写代码，以避免出现内存泄漏。
RAII的基本原则是：尽可能在栈上申请资源，如果由于资源太大或其它原因必须在堆上申请时，则该资源需要由一个栈上的对象持有；在该对象初始化时即获取该资源，同时在该对象的析构函数中释放该资源。在超出持有资源对象的作用域时，其析构函数会被自动调用，进而释放所持有的资源，从而避免了内存泄漏。
unique_ptr 特点 unique_ptr对象持有一个底层指针，在unique_ptr对象析构时会自动释放该指针。通过禁用拷贝构造函数与拷贝赋值操作符，unique_ptr保证此底层指针只有一个持有者。如需转移底层指针的所有权，可以使用移动语义，移动后原unique_ptr失效。
在确定同时只能有一个所有者的情况下，使用unique_ptr可以在编译期间即保证此约束，从而避免运行期间出现错误，同时可以简化代码逻辑并提高运行效率。
实现 在unique_ptr类中，至少需要实现以下功能：
普通构造函数：保存传入的指针 析构函数：释放持有的指针 拷贝构造函数/赋值操作符：禁止使用，避免多个持有者 移动构造函数/赋值操作符：实现底层指针所有权的转移 *与-&amp;gt;操作符：实现与普通指针相同的操作 一个简单的实现如下：
template &amp;lt;typename T&amp;gt; class unique_ptr { public: // 普通构造函数，保存传入的指针 unique_ptr(T *p = nullptr) : ptr_(p) {} // 析构函数 ~unique_ptr() { // 底层指针非空则释放 if (ptr_) { delete ptr_; ptr_ = nullptr; } } // 禁用拷贝构造函数与赋值操作符，保证只有一个所有者 unique_ptr(const unique_ptr &amp;amp;) = delete; unique_ptr &amp;amp;operator=(const unique_ptr &amp;amp;) = delete; // 移动构造函数 unique_ptr(unique_ptr &amp;amp;&amp;amp;p) { // 保存底层指针 ptr_ = p.</description>
      </item>
    
      <item>
        <title>右值引用</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/rvalue-reference/</link>
        <pubDate>Sat, 03 Jun 2023 15:51:24 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/rvalue-reference/</guid>
        <description>左值与右值 C++03标准 C++03标准中将表达式分为左值与右值，并且非左即右：
左值：表达式结束后依然存在的持久对象，可以出现在赋值号的左侧与右侧，可以寻址 右值：表达式结束后就不再存在的临时对象，只可以出现在赋值号的右侧，不可寻址 C++11标准 C++11对左值、右值的分类重新进行了定义，在C++11标准中，表达式有以下两个属性：
有身份：指代某个非临时对象 可被移动：可被右值引用类型匹配 根据以上两个属性可以得到4种组合：
有身份，不可移动：左值，与C++03中的左值相同 无身份，可移动：纯右值，与C++03中的右值相同 有身份，可移动：将亡值，即生命周期即将结束的值，为C++11中新增加的类型 无身份，不可移动：无意义 将亡值与纯右值合称为右值。
右值引用 C++11之前的引用类型全部为左值引用，用&amp;amp;符号声明。一般来说，左值引用必须绑定左值：
// num为左值 int num = 10; // 正确，a为左值num的引用 int &amp;amp;a = num; // 错误，10为右值，不能使用左值引用绑定 int &amp;amp;b = 10; 但是有个例外，可以将const左值引用绑定至右值：
const int &amp;amp;c = 10; C++11中添加了右值引用类型，用&amp;amp;&amp;amp;符号声明，右值引用只能绑定右值：
// num为左值 int num = 10; // 错误，右值引用不能绑定左值 int &amp;amp;&amp;amp;a = num; // 正确，右值引用绑定纯右值 int &amp;amp;&amp;amp;b = 10; 右值引用的主要作用是用于实现移动语义与完美转发。
移动语义 在没有右值引用之前，C++中只存在“拷贝语义”，通过使用拷贝构造函数或拷贝赋值运算符（它们的参数为左值引用）可以将一个对象进行拷贝：
class A { public: A() {} ~A() {} // 拷贝构造函数 A(const A &amp;amp;rhs) {} // 拷贝赋值运算符 A &amp;amp;operator=(const A &amp;amp;rhs) { return *this; } }; int main() { A a1; // 使用拷贝构造函数进行对象拷贝 A a2(a1); A a3 = a1; // 使用拷贝赋值运算符进行对象拷贝 A a4; a4 = a1; } 此时，如果要将一个即将析构的对象赋值给一个新对象，仍然需要先进行拷贝再进行析构，这样运行效率较低。由于原对象即将析构，因此可以将其中的资源移动至新对象，从而减少一次资源复制。</description>
      </item>
    
      <item>
        <title>函数对象与lambda表达式</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/function-object-and-lambda-expression/</link>
        <pubDate>Mon, 05 Jun 2023 20:29:17 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/function-object-and-lambda-expression/</guid>
        <description>函数对象 函数对象（仿函数/函子）指实现了operator()运算符的类的对象，它的调用方式与函数类似。相对于直接函数调用，函数对象有两个优势：
函数对象可包含状态 函数对象是一个类型，因此可用作模板参数 class Plus { public: int operator()(int a, int b) { return a + b; } }; int main() { Plus plus; int n = plus(11, 22); } lambda表达式 lambda表达式是C++11引入的一个语法糖，使用它可以方便快捷地创建一个匿名函数对象。
int main() { auto plus = [](int a, int b) { return a + b; }; int n = plus(11, 22); } 组成 一个完整lambda表达式的组成如下：
[ capture-list ] ( params ) mutable(optional) exception(optional) -&amp;gt; ret(optional) { body } 捕获列表（capture-list） 参数列表（params） mutable标识（mutable，可选） 异常标识（exception，可选） 返回类型（ret，可选） 函数体（body） 其中，参数列表、异常标识、返回类型、函数体4部分都与函数基本相同，其它部分说明如下：</description>
      </item>
    
      <item>
        <title>std::function与std::bind</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/std-function-and-std-bind/</link>
        <pubDate>Mon, 05 Jun 2023 20:57:03 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/std-function-and-std-bind/</guid>
        <description>std::function 类模板std::function是通用多态函数封装器。std::function的实例能存储、复制及调用任何可调用目标，包括：
函数/函数指针 函数对象 lambda表达式 成员函数指针 数据成员指针 作用 调用者可使用统一的方式调用可调用目标，无需关心绑定的具体类型 一种类型的std::function对象可绑定多种类型的可调用目标，实现多态的效果（例如用于回调函数） 例子 struct Foo { Foo(int num) : num_(num) {} void print_add(int i) const { std::cout &amp;lt;&amp;lt; num_ + i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } int num_; }; void print_num(int i) { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } struct PrintNum { void operator()(int i) const { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } }; int main() { // 存储函数 std::function&amp;lt;void(int)&amp;gt; f1 = print_num; f1(-9); // 存储lambda表达式 std::function&amp;lt;void()&amp;gt; f2 = []() { print_num(42); }; f2(); // 存储std::bind的结果 std::function&amp;lt;void()&amp;gt; f3 = std::bind(print_num, 31337); f3(); // 存储成员函数指针 std::function&amp;lt;void(const Foo &amp;amp;, int)&amp;gt; f4 = &amp;amp;Foo::print_add; const Foo foo(314159); f4(foo, 1); f4(314159, 1); // 存储数据成员指针 std::function&amp;lt;int(Foo const &amp;amp;)&amp;gt; f5 = &amp;amp;Foo::num_; std::cout &amp;lt;&amp;lt; f5(foo) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; // 存储成员函数指针，绑定对象 using std::placeholders::_1; std::function&amp;lt;void(int)&amp;gt; f6 = std::bind(&amp;amp;Foo::print_add, foo, _1); f6(2); // 存储成员函数指针，绑定对象指针 std::function&amp;lt;void(int)&amp;gt; f7 = std::bind(&amp;amp;Foo::print_add, &amp;amp;foo, _1); f7(3); // 存储函数对象 std::function&amp;lt;void(int)&amp;gt; f8 = PrintNum(); f8(18); } std::bind std::bind函数将可调用目标与指定参数进行绑定，并以函数对象的形式保存。调用此函数对象相当于使用绑定的参数调用原可调用目标。如果有的参数不能在绑定时确定，可以使用std::placeholders中的占位符占位，并延迟到调用时再传入。</description>
      </item>
    
      <item>
        <title>类型推导</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/type-deduction/</link>
        <pubDate>Tue, 06 Jun 2023 21:10:22 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/type-deduction/</guid>
        <description>C++是强类型语言，使用每个变量前必须声明其类型。如果不进行类型推导，则用户必须自行声明所有变量的类型，对于一些复杂的类型（如容器的迭代器）或临时类型（如lambda表达式），这是没有意义甚至无法完成的。为此，C++11标准引入了auto与decltype两个关键字用于进行类型推导，使得编译器可以自动推导出变量的类型。这样做有以下好处：
鲁棒性：即使更改表达式的类型也能正常工作 性能：可以保证没有进行转换 可用性：不必担心类型名称拼写困难或拼写有误 效率：代码会变得更高效 auto 在C++11之前，auto关键字为存储期说明符，但是基本不使用。C++11之后将此关键字用于类型推导，其基本语法是：
auto 变量名 初始化器; 基本用法 // 通用初始化语法 auto a{42}; // 赋值语法 auto b = 0; // 通用赋值语法，它结合了上述两种形式 auto c = {3.14159}; // 直接初始化或构造函数样式的语法 auto d(1.41421f); // 通过表达式推导 auto e = 1 + 2; // 通过函数返回值推导 auto f = add(1, 1.2); // 推导new操作符结果 auto g = new auto(10); // 推导lambda表达式类型 auto lambda1 = [](int x) { return x + 3; }; // 可在一行定义多个变量，但是不能出现冲突 auto x = a, &amp;amp;y = b, *z = &amp;amp;e; // C++14后可自动推导函数返回值 auto func() { return 2 + 3; } // C++14后可自动推导lambda函数的参数 auto lambda2 = [](auto a) { return a; }; // C++17后可自动推导非类型模板参数 template &amp;lt;auto I&amp;gt; struct A; // 在for循环中使用 auto vec = std::vector&amp;lt;int&amp;gt;(); for (auto it = vec.</description>
      </item>
    
      <item>
        <title>const与constexpr</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/const-and-constexpr/</link>
        <pubDate>Wed, 07 Jun 2023 01:08:48 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/const-and-constexpr/</guid>
        <description>const C++11之前就存在const关键字，用于进行常量相关操作。它的主要用法如下：
// 定义常量，使其不能修改 const int value = 5; // 可以使用常量定义数组 char arr[value]; char s[10]; // 指针不可修改，指向的内容可修改 char *const ptr1 = s; // 指针可修改，指向的内容不可修改 const char *ptr2; // 指针与指向的内容均不可修改 const char *const ptr3 = &amp;#34;string&amp;#34;; // 修饰函数参数，使其不可修改，如果同时使用引用可避免复制对象 void func(const A &amp;amp;a); // 修饰成员变量，使其不能修改，只能进行初始化 class A { const int value = 5; }; class B { const int value; B(int v) : value(v) {} }; // 修饰成员函数，使其不能修改成员变量 class C { public: void func() const {} }; // 修饰对象，使其只能调用const成员函数 const C c; c.</description>
      </item>
    
      <item>
        <title>枚举</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/enumeration/</link>
        <pubDate>Wed, 07 Jun 2023 23:54:06 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/enumeration/</guid>
        <description>无作用域枚举（enum） C++11之前存在的枚举为无作用域枚举，使用enum关键字声明：
enum Color { red, green, blue }; 每个枚举项都成为该枚举类型的一个具名常量，在它的外围作用域可见，且可以用于要求常量的任何位置：
Color r = red; 每个枚举类型都有一个底层类型，可以显式指定底层类型：
enum smallenum : std::int16_t { a, b, c }; 可以在枚举项列表中提供初始化器，各枚举项的值由那些初始化器所定义。如果首个枚举项无初始化器，那么它的关联值为零。对于其他任何定义中无初始化器的枚举项，它的关联值是前一枚举项加一：
enum Foo { a, b, c = 10, d, e = 1, f, g = f + c }; 无作用域枚举类型的值可隐式转换到整型类型：
int n = blue; 无作用域枚举的名字可以忽略：
enum { a, b, c = 0, d = a + 2 }; 使用无作用域枚举可能产生以下问题：
由于枚举项在任何作用域可见，因此容易与其它变量名称产生冲突 由于枚举项可隐式转换到整型类型，因此有时会发生未预期的转换 有作用域枚举（enum class或enum struct） C++11引入新的有作用域枚举，使用enum class或enum struct关键字声明：</description>
      </item>
    
      <item>
        <title>列表初始化</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/list-initialization/</link>
        <pubDate>Thu, 08 Jun 2023 00:42:33 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/list-initialization/</guid>
        <description>列表初始化是使用花括号初始化器对变量进行初始化的方式。C++11之前只能用于数组等少量类型，C++11后将这种方式推广至所有类型。
初始化非类类型 // 不使用列表初始化 int a; // 默认初始化，值不确定 int b = int(); // 零初始化 int c(1); // 直接初始化 int d = 1; // 复制初始化 // 使用列表初始化 int e{}; // 零初始化 int f{1}; // 直接初始化 int g = {1}; // 复制初始化 int h = int{1}; // 直接初始化临时量，然后复制初始化 // 列表初始化引用 const int &amp;amp;r1 = {1}; // 绑定const左值引用到临时变量 int &amp;amp;&amp;amp;r2 = {1}; // 绑定右值引用到临时变量 int &amp;amp;r3 = {2}; // 错误，不能绑定右值到非const左值引用 初始化类类型 初始化聚合类型 聚合类型是下列类型之一：</description>
      </item>
    
      <item>
        <title>元组与结构化绑定</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/tuple-and-structured-binding/</link>
        <pubDate>Thu, 08 Jun 2023 21:49:57 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/tuple-and-structured-binding/</guid>
        <description>元组 有时需要将多个不同类型的变量聚合为一个新类型，虽然使用类或结构体即可实现此功能，但是它们都需要提前声明并指定一个类型名称。很多情况下用户并不会重复使用该类型，或者并不关心该类型的名称，但是希望能够更加简单地实现该功能。为了解决此问题，C++11中引入了元组。元组类模板std::tuple是固定大小的异类值汇集。它是std::pair的泛用形式。
std::tuple&amp;lt;int, std::string, double&amp;gt; t1; // 用默认值初始化 std::tuple&amp;lt;int, std::string, double&amp;gt; t2{42, &amp;#34;Test&amp;#34;, -3.14}; // 列表初始化 std::tuple&amp;lt;char, std::string, int&amp;gt; t3{t2}; // 隐式转换 std::tuple&amp;lt;int, double&amp;gt; t4{std::make_pair(42, 3.14)}; // 从pair创建 auto t5 = std::make_tuple(1, 2.0f, 3.14, &amp;#34;string&amp;#34;); // 使用make_tuple创建 auto t6 = std::tuple_cat(t1, t2, t3); // 拼接元组 int size = std::tuple_size&amp;lt;decltype(t1)&amp;gt;::value; // 获取元素个数 int a = std::get&amp;lt;0&amp;gt;(t1); // 提取单个元素 std::get&amp;lt;0&amp;gt;(t1) = 0; // 修改单个元素 int a1; std::string b1; double c1; std::tie(a1, b1, c1) = t1; // 解包元素 const auto [a2, b2, c2] = t2; // 结构化绑定 结构化绑定 结构化绑定用于将一组变量绑定至一个复合结构的所有子元素上，该复合结构可以为数组、元组或结构体。虽然也可以使用赋值语句逐一进行绑定，但是结构化绑定极大地简化了这一操作。</description>
      </item>
    
      <item>
        <title>类中的新特性</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/new-features-in-class/</link>
        <pubDate>Thu, 08 Jun 2023 23:06:07 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/new-features-in-class/</guid>
        <description>委托构造 同一个类中的一个构造函数可以调用另一个构造函数，从而达到简化代码的目的：
class Base { public: Base() { value1 = 1; } Base(int value) : Base() // 委托Base()构造函数 { value2 = 2; } private: int value1; int value2; }; 继承构造 假设父类有多个版本的构造函数，即使子类不进行修改，也必须编写同样多的构造函数，将参数透传至父类，例如：
class A { public: A(int i) {} A(double d, int i) {} A(float f, int i, const char *c) {} //...... }; class B : public A { public: B(int i) : A(i) {} B(double d, int i) : A(d, i) {} B(float f, int i, const char *c) : A(f, i, c) {} //.</description>
      </item>
    
      <item>
        <title>std::optional、std::variant与std::any</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/optional-variant-any/</link>
        <pubDate>Fri, 09 Jun 2023 00:37:27 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/optional-variant-any/</guid>
        <description>C++17中提出了以下三种数据类型用于更加安全、方便地处理可变数据。
std::optional 类模板std::optional管理一个可选的容纳值，该值既可以存在也可以不存在。虽然直接使用指针就可以实现相同的功能，但是容易引发内存泄漏或二次释放等问题。其它实现方式（如使用std::pair&amp;lt;T,bool&amp;gt;）语法复杂且效率低下，而std::optional可以简单、高效地处理此问题。
// 初始化为不包含值 std::optional&amp;lt;int&amp;gt; opt1; std::optional&amp;lt;int&amp;gt; opt2(std::nullopt); std::optional&amp;lt;int&amp;gt; opt3 = std::nullopt; // 初始化为包含值 std::optional&amp;lt;int&amp;gt; op4(1); std::optional&amp;lt;int&amp;gt; op5 = 2; std::optional&amp;lt;int&amp;gt; op6 = std::make_optional&amp;lt;int&amp;gt;(3); // 判断是否包含值 if (opt1.has_value()) { // 可使用*或-&amp;gt;操作符访问包含的值，但是需要自行判断是否包含值 std::cout &amp;lt;&amp;lt; &amp;#34;opt1: &amp;#34; &amp;lt;&amp;lt; *opt1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } // 实现了bool运算符，表示是否包含值 if (opt1) { std::cout &amp;lt;&amp;lt; &amp;#34;opt1: &amp;#34; &amp;lt;&amp;lt; *opt1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } // 使用value成员函数获取包含的值，如果不包含值则抛出异常 try { int n = opt1.value(); } catch (const std::exception &amp;amp;e) { std::cout &amp;lt;&amp;lt; e.</description>
      </item>
    
      <item>
        <title>形参包</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/parameter-pack/</link>
        <pubDate>Fri, 09 Jun 2023 20:58:23 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/parameter-pack/</guid>
        <description>模板形参包是接受零个或多个模板实参（非类型、类型或模板）的模板形参。函数模板形参包是接受零个或多个函数实参的函数形参。至少有一个形参包的模板被称作变参模板。
定义 变参类模板可用任意数量的模板实参实例化：
template &amp;lt;class... Types&amp;gt; struct Tuple {}; Tuple&amp;lt;&amp;gt; t0; // Types不包含实参 Tuple&amp;lt;int&amp;gt; t1; // Types包含一个实参：int Tuple&amp;lt;int, float&amp;gt; t2; // Types包含两个实参：int与float Tuple&amp;lt;0&amp;gt; error; // 错误：0不是类型 变参函数模板可用任意数量的函数实参调用（模板实参通过模板实参推导规则进行推导）：
template &amp;lt;class... Types&amp;gt; void f(Types... args) {} f(); // args不包含实参 f(1); // args包含一个实参：int f(2, 1.0); // args包含两个实参：int与double 在类模板中，模板形参包必须是模板形参列表的最后一个形参。在函数模板中，模板参数包可以在列表中稍早出现，只要其后的所有形参均可从函数实参推导或拥有默认实参即可：
// 正确，Ts在结尾 template &amp;lt;typename U, typename... Ts&amp;gt; struct valid; // 错误，Ts不在结尾 template &amp;lt;typename... Ts, typename U&amp;gt; struct invalid; // 正确，可以推导U template &amp;lt;typename... Ts, typename U, typename = void&amp;gt; void valid(U, Ts.</description>
      </item>
    
      <item>
        <title>文件系统库</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/filesystem-lib/</link>
        <pubDate>Fri, 09 Jun 2023 22:11:36 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/filesystem-lib/</guid>
        <description>C++17从boost引入了文件系统库std::filesystem，提供在文件系统及其组件，例如路径、常规文件与目录上进行操作的方法。
path 类型path的对象表示文件系统上的路径，其中包含许多对路径进行操作的成员函数。
namespace fs = std::filesystem; fs::path p1 = &amp;#34;/path/to/file&amp;#34;; // 使用字符序列构造路径 fs::path p2(&amp;#34;/path/to/dir&amp;#34;); // 使用字符序列构造路径 fs::path p3(p1); // 复制构造路径 p3 = &amp;#34;/path/to/another/file&amp;#34;; // 赋值 p2 /= &amp;#34;dir1&amp;#34;; // 使用/=拼接路径，加入分隔符 p2 += &amp;#34;dir2&amp;#34;; // 使用+=拼接路径，不加入分隔符 fs::path p4 = p2 / &amp;#34;dir3&amp;#34;; // 使用/拼接路径，加入分隔符 p1.filename(); // 获取文件名 p2.stem(); // 获取文件名主干部分（不含扩展名） p3.extension(); // 获取扩展名 p1.has_filename(); // 检查filename()是否为空 p2.has_stem(); // 检查stem()是否为空 p3.has_extension(); // 检查extension()是否为空 p1.remove_filename(); // 删除文件名 p2.replace_filename(&amp;#34;foo&amp;#34;); // 替换文件名 p3.replace_extension(&amp;#34;.bar&amp;#34;); // 替换扩展名 p1.</description>
      </item>
    
      <item>
        <title>日期时间库</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/datetime-lib/</link>
        <pubDate>Fri, 09 Jun 2023 23:16:33 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/datetime-lib/</guid>
        <description>std::chrono是源于boost的C++新时间库，其中包含3个主要类型以及一些辅助函数。
时间间隔 类模板std::chrono::duration用于表示时间间隔。其定义如下：
template&amp;lt; class Rep, class Period = std::ratio&amp;lt;1&amp;gt; &amp;gt; class duration; 其中，Rep为计次数的算术类型，可为整型、浮点型；Period为计次周期，为分数类型（std::ratio），单位为秒。例如，如果Period为std::ratio&amp;lt;1, 1000&amp;gt;，则表示计次周期为毫秒。每个duration对象包含一个Rep类型的次数，可用count()成员函数获取。次数×周期即为duration对象表示的时间间隔。常用的duration类型已经预定义：
nanoseconds：duration&amp;lt;至少64位的有符号整数类型, std::nano&amp;gt; microseconds：duration&amp;lt;至少55位的有符号整数类型, std::micro&amp;gt; milliseconds：duration&amp;lt;至少45位的有符号整数类型, std::milli&amp;gt; seconds：duration&amp;lt;至少35位的有符号整数类型, std::ratio&amp;lt;1&amp;gt;&amp;gt; minutes：duration&amp;lt;至少29位的有符号整数类型, std::ratio&amp;lt;60&amp;gt;&amp;gt; hours：duration&amp;lt;至少23位的有符号整数类型, std::ratio&amp;lt;3600&amp;gt;&amp;gt; 其中，std::nano为std::ratio&amp;lt;1, 1000000000&amp;gt;，std::micro为std::ratio&amp;lt;1, 1000000&amp;gt;，std::milli为std::ratio&amp;lt;1, 1000&amp;gt;。C++20还添加了days、weeks、months和years。
// 10秒 std::chrono::seconds ten_seconds(10); // 5小时 std::chrono::hours five_hours(5); 时间间隔字面值 C++14中添加了一些字面值后缀操作符，可以方便地生成时间间隔字面值：
h：小时 min：分钟 s：秒 ms：毫秒 us：微妙 ns：纳秒 using namespace std::chrono_literals; auto two_hours = 2h; auto five_minutes = 5min; 时间间隔转换 不同单位的时间间隔之间可以相互转换，转换规则为：
当整数时间间隔相互转换且源间隔单位可被目标间隔单位整除，或浮点时间间隔相互转换时，不会发生精度损失，可使用duration类的构造函数隐式转换 浮点时间间隔转整数时间间隔时，如果浮点值为NaN，无穷或相对整数间隔单位来说过大时，会出现未定义行为 其它情况（浮点时间间隔转整数时间间隔，或整数时间间隔相互转换但源间隔单位不能被目标间隔单位整除）下，会发生截断造成精度损失，情况与static_cast相同 // high_resolution_clock使用最小时间单位，且为整数时间间隔 auto t1 = std::chrono::high_resolution_clock::now(); // .</description>
      </item>
    
      <item>
        <title>并发库</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/thread-and-synchronization/</link>
        <pubDate>Sat, 10 Jun 2023 11:47:09 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/thread-and-synchronization/</guid>
        <description>线程 C++11引入了与操作系统无关的std::thread类，可以使用统一的方式创建线程。C++20提供了std::jthread类，在std::thread的基础上增加了自动合并与外部请求终止的功能。
auto func = []() { for (int i = 0; i &amp;lt; 10; ++i) std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; std::cout &amp;lt;&amp;lt; std::endl; }; std::thread t(func); // 创建一个线程并开始执行 if (t.joinable()) // 检查线程可否被合并 t.join(); // 阻塞等待线程结束 if (t.joinable()) t.detach(); // 将线程和线程对象分离，无法再与线程交互 互斥 使用互斥避免多个线程同时访问共享资源，这可以避免数据竞争，并提供线程间的同步支持。
互斥量 C++并发库中提供以下互斥量：
mutex：基本互斥量 timed_mutex：带时限互斥量 recursive_mutex：能被同一线程递归锁定的互斥量 recursive_timed_mutex：带时限且能被同一线程递归锁定的互斥量 shared_mutex：共享互斥量 shared_timed_mutex：带时限共享互斥量 std::mutex mut; // 互斥量 std::vector&amp;lt;int&amp;gt; nums; // 共享变量 auto func = [&amp;amp;](int k) { mut.lock(); // 对互斥量加锁 nums.</description>
      </item>
    
      <item>
        <title>其他特性</title>
        <link>https://zqwang-cn.github.io/cpp-new-features/other-features/</link>
        <pubDate>Sat, 10 Jun 2023 15:17:07 +0800</pubDate>
        
        <guid>https://zqwang-cn.github.io/cpp-new-features/other-features/</guid>
        <description>nullptr C++11以前通常用NULL表示空指针，但是NULL是用#define定义的，通常定义为0：
#define NULL 0 因此实际上它与数值0没有区别，这在重载时会引发混乱。如果定义以下两个重载函数：
void foo(char *); void foo(int); 在用NULL作为参数调用时：
foo(NULL); 用户应该希望调用char*版本，然而由于NULL实际上是0，会导致调用int版本。为了解决这一问题，C++11引入了nullptr关键字用来专门表示空指针。它是std::nullptr_t类型的纯右值，可以隐式转换为任何指针类型及任何成员指针类型。使用nullptr调用上述函数：
foo(nullptr); 可以正确调用char*版本。
基于范围的for循环 C++11引入了基于范围的for循环，它相当于其它语言的for-each或for-in循环，可以使循环代码更加简洁。
std::vector&amp;lt;int&amp;gt; arr(5, 100); for (auto &amp;amp;i : arr) { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; } 条件表达式中支持初始化语句 c++17中支持在if或者switch语句中进行初始化，这个能力的出现能够让代码更加简洁。
std::map&amp;lt;int, std::string&amp;gt; c = {{1, &amp;#34;a&amp;#34;}}; if (auto res = c.insert(std::make_pair(2, &amp;#34;b&amp;#34;)); !res.second) { std::cout &amp;lt;&amp;lt; &amp;#34;key 1 exist&amp;#34; &amp;lt;&amp;lt; std::endl; } else { std::cout &amp;lt;&amp;lt; &amp;#34;insert success, value:&amp;#34; &amp;lt;&amp;lt; res.first-&amp;gt;second &amp;lt;&amp;lt; std::endl; } 非成员函数std::begin()与std::end() C++标准库中的容器都实现了begin()与end()成员函数，用于获取首尾迭代器。例如：</description>
      </item>
    
  </channel>
</rss>